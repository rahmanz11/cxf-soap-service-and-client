package alom.bank.server.service;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by Apache CXF 3.5.3
 * 2022-10-10T09:40:41.134+06:00
 * Generated source version: 3.5.3
 *
 */
@WebService(targetNamespace = "http://service.server.bank.alom/", name = "BankServer")
@XmlSeeAlso({ObjectFactory.class})
public interface BankServer {

    @WebMethod
    @RequestWrapper(localName = "closeAccount", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.server.service.CloseAccount")
    @ResponseWrapper(localName = "closeAccountResponse", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.server.service.CloseAccountResponse")
    @WebResult(name = "return", targetNamespace = "")
    public java.lang.Float closeAccount(

        @WebParam(name = "AccountId", targetNamespace = "")
        java.lang.Integer accountId
    ) throws AccountNotExistsException_Exception, InternalServiceException_Exception;

    @WebMethod
    @RequestWrapper(localName = "transferBetweenAccountOfDifferentClient", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.server.service.TransferBetweenAccountOfDifferentClient")
    @ResponseWrapper(localName = "transferBetweenAccountOfDifferentClientResponse", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.server.service.TransferBetweenAccountOfDifferentClientResponse")
    public void transferBetweenAccountOfDifferentClient(

        @WebParam(name = "DebitClientId", targetNamespace = "")
        java.lang.Integer debitClientId,
        @WebParam(name = "DebitAccountType", targetNamespace = "")
        java.lang.String debitAccountType,
        @WebParam(name = "CreditClientId", targetNamespace = "")
        java.lang.Integer creditClientId,
        @WebParam(name = "CreditAccountType", targetNamespace = "")
        java.lang.String creditAccountType,
        @WebParam(name = "TransferAmount", targetNamespace = "")
        java.lang.Float transferAmount
    ) throws WithdrawalNotAllowedException_Exception, AccountNotExistsException_Exception, ClientNotExistsException_Exception, AmountIncorrectException_Exception;

    @WebMethod
    @RequestWrapper(localName = "createClient", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.server.service.CreateClient")
    @ResponseWrapper(localName = "createClientResponse", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.server.service.CreateClientResponse")
    @WebResult(name = "return", targetNamespace = "")
    public alom.bank.server.service.ClientInfo createClient(

        @WebParam(name = "FirstName", targetNamespace = "")
        java.lang.String firstName,
        @WebParam(name = "LastName", targetNamespace = "")
        java.lang.String lastName,
        @WebParam(name = "DateOfBirth", targetNamespace = "")
        java.lang.String dateOfBirth
    ) throws ClientAlreadyExistsException_Exception, InternalServiceException_Exception;

    @WebMethod
    @RequestWrapper(localName = "removeClient", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.server.service.RemoveClient")
    @ResponseWrapper(localName = "removeClientResponse", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.server.service.RemoveClientResponse")
    public void removeClient(

        @WebParam(name = "ClientId", targetNamespace = "")
        java.lang.Integer clientId
    ) throws ClientAccountAvailableException_Exception, InternalServiceException_Exception, ClientNotExistsException_Exception;

    @WebMethod
    @RequestWrapper(localName = "createAccount", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.server.service.CreateAccount")
    @ResponseWrapper(localName = "createAccountResponse", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.server.service.CreateAccountResponse")
    @WebResult(name = "return", targetNamespace = "")
    public alom.bank.server.service.AccountInfo createAccount(

        @WebParam(name = "ClientId", targetNamespace = "")
        java.lang.Integer clientId,
        @WebParam(name = "AccountType", targetNamespace = "")
        java.lang.String accountType
    ) throws AccountAlreadyExistsException_Exception, AccountTypeNotExistsException_Exception, InternalServiceException_Exception, ClientNotExistsException_Exception;

    @WebMethod
    @RequestWrapper(localName = "getClient", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.server.service.GetClient")
    @ResponseWrapper(localName = "getClientResponse", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.server.service.GetClientResponse")
    @WebResult(name = "return", targetNamespace = "")
    public alom.bank.server.service.ClientInfo getClient(

        @WebParam(name = "FirstName", targetNamespace = "")
        java.lang.String firstName,
        @WebParam(name = "LastName", targetNamespace = "")
        java.lang.String lastName,
        @WebParam(name = "DateOfBirth", targetNamespace = "")
        java.lang.String dateOfBirth
    ) throws InternalServiceException_Exception, ClientNotExistsException_Exception;

    @WebMethod
    @RequestWrapper(localName = "addAmountToAccountBalance", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.server.service.AddAmountToAccountBalance")
    @ResponseWrapper(localName = "addAmountToAccountBalanceResponse", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.server.service.AddAmountToAccountBalanceResponse")
    @WebResult(name = "return", targetNamespace = "")
    public java.lang.Float addAmountToAccountBalance(

        @WebParam(name = "AccountId", targetNamespace = "")
        java.lang.Integer accountId,
        @WebParam(name = "Amount", targetNamespace = "")
        java.lang.Float amount
    ) throws AccountNotExistsException_Exception, AmountIncorrectException_Exception;

    @WebMethod
    @RequestWrapper(localName = "transferBetweenAccountOfSameClient", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.server.service.TransferBetweenAccountOfSameClient")
    @ResponseWrapper(localName = "transferBetweenAccountOfSameClientResponse", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.server.service.TransferBetweenAccountOfSameClientResponse")
    public void transferBetweenAccountOfSameClient(

        @WebParam(name = "ClientId", targetNamespace = "")
        java.lang.Integer clientId,
        @WebParam(name = "DebitAccountType", targetNamespace = "")
        java.lang.String debitAccountType,
        @WebParam(name = "CreditAccountType", targetNamespace = "")
        java.lang.String creditAccountType,
        @WebParam(name = "TransferAmount", targetNamespace = "")
        java.lang.Float transferAmount
    ) throws WithdrawalNotAllowedException_Exception, AccountNotExistsException_Exception, ClientNotExistsException_Exception, AmountIncorrectException_Exception;

    @WebMethod
    @RequestWrapper(localName = "withdrawAmountFromBankAccount", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.server.service.WithdrawAmountFromBankAccount")
    @ResponseWrapper(localName = "withdrawAmountFromBankAccountResponse", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.server.service.WithdrawAmountFromBankAccountResponse")
    @WebResult(name = "return", targetNamespace = "")
    public java.lang.Float withdrawAmountFromBankAccount(

        @WebParam(name = "AccountId", targetNamespace = "")
        java.lang.Integer accountId,
        @WebParam(name = "Amount", targetNamespace = "")
        java.lang.Float amount
    ) throws WithdrawalNotAllowedException_Exception, AccountNotExistsException_Exception, AmountIncorrectException_Exception;

    @WebMethod
    @RequestWrapper(localName = "getClientAccount", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.server.service.GetClientAccount")
    @ResponseWrapper(localName = "getClientAccountResponse", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.server.service.GetClientAccountResponse")
    @WebResult(name = "return", targetNamespace = "")
    public alom.bank.server.service.AccountInfo getClientAccount(

        @WebParam(name = "ClientId", targetNamespace = "")
        java.lang.Integer clientId,
        @WebParam(name = "AccountType", targetNamespace = "")
        java.lang.String accountType
    ) throws AccountNotExistsException_Exception, AccountTypeNotExistsException_Exception, InternalServiceException_Exception, ClientNotExistsException_Exception;
}
